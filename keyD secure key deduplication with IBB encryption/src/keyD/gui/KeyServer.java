package keyD.gui;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.Timer;
import keyD.dbutill.DBconnection;

/**
 *
 * @author DELL
 */
public class KeyServer extends javax.swing.JFrame {

    int count = 0;
    Timer timer;
    String keyWord = "ef50a0ef2c3e3a5fdf803ae9752c8c66";
    ImageIcon one, two, three, four, arrow1, arrow2, arrow3, arrow4, arrow5, arrow6;

    public KeyServer() {
        initComponents();
        timer = new Timer(0, null);

        int[] ports = new int[]{509, 8282, 1717, 4949, 1515, 2626};

        for (int i = 0; i < 6; i++) {
            Thread t2 = new Thread(new PortListener(ports[i]));
            t2.start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblimgSource = new javax.swing.JLabel();
        lblimgKey = new javax.swing.JLabel();
        lblimgKM = new javax.swing.JLabel();
        lblimgMLE = new javax.swing.JLabel();
        lblA1 = new javax.swing.JLabel();
        lblA2 = new javax.swing.JLabel();
        lblA3 = new javax.swing.JLabel();
        lblA4 = new javax.swing.JLabel();
        lblA5 = new javax.swing.JLabel();
        lblA6 = new javax.swing.JLabel();
        lblSource = new javax.swing.JLabel();
        lblKeyServer = new javax.swing.JLabel();
        lblKM = new javax.swing.JLabel();
        lblMLE = new javax.swing.JLabel();
        lblOutPut0 = new javax.swing.JLabel();
        lblOutPut1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mbarKeyServer = new javax.swing.JMenu();
        mitemServerDetails = new javax.swing.JMenuItem();
        mitemViewKMCSP = new javax.swing.JMenuItem();
        mitemViewMLE = new javax.swing.JMenuItem();
        mitemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblimgSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/Source.jpg"))); // NOI18N
        lblimgSource.setText("1");
        jPanel1.add(lblimgSource, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 165, 83, 89));

        lblimgKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/KeyServer.png"))); // NOI18N
        jPanel1.add(lblimgKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, 81, 80));

        lblimgKM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/GreyBox.jpg"))); // NOI18N
        jPanel1.add(lblimgKM, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 93, 86));

        lblimgMLE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/BlackBox.jpg"))); // NOI18N
        jPanel1.add(lblimgMLE, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 310, 93, 78));

        lblA1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1.png"))); // NOI18N
        jPanel1.add(lblA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 192, 90, 16));

        lblA2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2.png"))); // NOI18N
        jPanel1.add(lblA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 214, -1, 16));

        lblA3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3.png"))); // NOI18N
        jPanel1.add(lblA3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, 62));

        lblA4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4.png"))); // NOI18N
        jPanel1.add(lblA4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, 87, -1));

        lblA5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5.png"))); // NOI18N
        jPanel1.add(lblA5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, 80, 70));

        lblA6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6.png"))); // NOI18N
        jPanel1.add(lblA6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, 80, 70));

        lblSource.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblSource.setText("SOURCE");
        jPanel1.add(lblSource, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 260, 83, 37));

        lblKeyServer.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblKeyServer.setText("KEY SERVER");
        jPanel1.add(lblKeyServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, 80, 32));

        lblKM.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblKM.setText("KM CSP");
        jPanel1.add(lblKM, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, 60, 40));

        lblMLE.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblMLE.setText("MLE");
        jPanel1.add(lblMLE, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 400, 50, 40));

        lblOutPut0.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jPanel1.add(lblOutPut0, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 130, 30));

        lblOutPut1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jPanel1.add(lblOutPut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 200, 220, 40));

        mbarKeyServer.setText("Key Server");

        mitemServerDetails.setText("Server Details");
        mitemServerDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitemServerDetailsActionPerformed(evt);
            }
        });
        mbarKeyServer.add(mitemServerDetails);

        mitemViewKMCSP.setText("View KM CSP");
        mitemViewKMCSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitemViewKMCSPActionPerformed(evt);
            }
        });
        mbarKeyServer.add(mitemViewKMCSP);

        mitemViewMLE.setText("View MLE");
        mitemViewMLE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitemViewMLEActionPerformed(evt);
            }
        });
        mbarKeyServer.add(mitemViewMLE);

        mitemExit.setText("Exit");
        mitemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitemExitActionPerformed(evt);
            }
        });
        mbarKeyServer.add(mitemExit);

        jMenuBar1.add(mbarKeyServer);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mitemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitemExitActionPerformed
        System.exit(0);

    }//GEN-LAST:event_mitemExitActionPerformed

    private void mitemViewKMCSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitemViewKMCSPActionPerformed
        ViewGrayBox v2 = new ViewGrayBox();
        v2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v2.setVisible(true);
    }//GEN-LAST:event_mitemViewKMCSPActionPerformed

    private void mitemServerDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitemServerDetailsActionPerformed
        ViewServerFiles v = new ViewServerFiles();
        v.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v.setVisible(true);
    }//GEN-LAST:event_mitemServerDetailsActionPerformed

    private void mitemViewMLEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitemViewMLEActionPerformed
        ViewBlackBox v1 = new ViewBlackBox();
        v1.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v1.setVisible(true);
    }//GEN-LAST:event_mitemViewMLEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeyServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeyServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblA1;
    private javax.swing.JLabel lblA2;
    private javax.swing.JLabel lblA3;
    private javax.swing.JLabel lblA4;
    private javax.swing.JLabel lblA5;
    private javax.swing.JLabel lblA6;
    private javax.swing.JLabel lblKM;
    private javax.swing.JLabel lblKeyServer;
    private javax.swing.JLabel lblMLE;
    private javax.swing.JLabel lblOutPut0;
    private javax.swing.JLabel lblOutPut1;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblimgKM;
    private javax.swing.JLabel lblimgKey;
    private javax.swing.JLabel lblimgMLE;
    private javax.swing.JLabel lblimgSource;
    private javax.swing.JMenu mbarKeyServer;
    private javax.swing.JMenuItem mitemExit;
    private javax.swing.JMenuItem mitemServerDetails;
    private javax.swing.JMenuItem mitemViewKMCSP;
    private javax.swing.JMenuItem mitemViewMLE;
    // End of variables declaration//GEN-END:variables
class PortListener implements Runnable {

        int port;

        public PortListener(int port) {
            this.port = port;
        }

        public void run() {
            if (this.port == 509) {
                try {
                    ServerSocket server909 = new ServerSocket(509);
                    Socket con777;
                    while (true) {
                        con777 = server909.accept();

                        DataInputStream din = new DataInputStream(con777.getInputStream());

                        String owner = din.readUTF();
                        String fname = din.readUTF();
                        String sk = din.readUTF();
                        String dt = din.readUTF();

                        DBconnection db = new DBconnection();
                        Connection connect = db.getConnection();
                        Statement stmt = connect.createStatement();
                        Statement stmt1 = connect.createStatement();

                        String status = "No";
                        ResultSet rs = connect.createStatement().executeQuery("select * from GreyBox where fname='" + fname + "'");
//          String duplicate="";
                        if (rs.next() == true) {
//		duplicate=rs.getString("skey");

//              stmt.executeUpdate("insert into GreyBox (owner,fname,skey,date1,attacked) values ('"+owner+"','"+fname+"','"+duplicate+"','"+dt+"','"+status+"')");
//	/       JOptionPane.showMessageDialog(null, "File Already Exixt \n You Can Use The Same File ");
                            Thread.sleep(2000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 = new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblA1.setIcon(arrow1);

                            lblOutPut0.setText("Encryption");
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblA3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);

                            lblOutPut1.setText("KEYS ALREADY EXIST");
                            lblOutPut1.setForeground(Color.BLACK);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblA4.setIcon(arrow4);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2g.png"));
                            lblA2.setIcon(arrow2);

                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            clear();

                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("no");
                        } 
                        else if (rs.next() == false) {
                            stmt.executeUpdate("insert into GreyBox (owner,fname,skey,date1,attacked) values ('" + owner + "','" + fname + "','" + sk + "','" + dt + "','" + status + "')");

                            Thread.sleep(2000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblA1.setIcon(arrow1);

                            lblOutPut0.setText("Encryption");
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblA3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblA4.setIcon(arrow4);

                            Thread.sleep(1000);
                            arrow5 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5g.png"));
                            lblA5.setIcon(arrow5);

                            Thread.sleep(1000);
                            lblimgMLE.setVisible(false);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(true);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(false);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(true);

                            lblOutPut1.setForeground(Color.BLACK);
                            lblOutPut1.setText("KEYS GENERATED");
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow6 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6g.png"));
                            lblA6.setIcon(arrow6);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2g.png"));
                            lblA2.setIcon(arrow2);

                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            clear();

                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("yes");
                        }
                        AES a = new AES();
                        String ownerenc = a.encrypt(owner, keyWord);
                        String skenc = a.encrypt(sk, keyWord);
                        String dtenc = a.encrypt(dt, keyWord);
//          String duplicate1="";
                        ResultSet res = connect.createStatement().executeQuery("select * from BlackBox where fname='" + fname + "'");
                        if (res.next() == true) {
//              duplicate1=res.getString("skey");

//		stmt1.executeUpdate("insert into BlackBox (owner,fname,skey,date1) values('"+ownerenc+"','"+fname+"','"+duplicate1+"','"+dtenc+"')");
                            System.out.println("Exist");
                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("no");
                        } else if (res.next() == false) {
                            stmt1.executeUpdate("insert into BlackBox (owner,fname,skey,date1) values('" + ownerenc + "','" + fname + "','" + skenc + "','" + dtenc + "')");

                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("yes");
                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 8282) {
                try {
                    ServerSocket server909 = new ServerSocket(8282);
                    Socket con777;

                    while (true) {
                        con777 = server909.accept();

                        DataInputStream din = new DataInputStream(con777.getInputStream());

                        String owner = din.readUTF();
                        String fname = din.readUTF();
                        String sk = din.readUTF();
                        String receiver = din.readUTF();
                        String dt = din.readUTF();

                        DBconnection db = new DBconnection();
                        Connection connect = db.getConnection();
                        Statement stmt = connect.createStatement();

                        String query1 = "insert into KeyServer values('" + owner + "','" + fname + "','" + sk + "','" + receiver + "','" + dt + "')";
                        stmt.executeUpdate(query1);

                        ResultSet res = connect.createStatement().executeQuery("select * from GreyBox where fname='" + fname + "'");

                        String grey = "";
                        if (res.next() == true) {
                            grey = res.getString("attacked");
                        }
                        if (grey.equalsIgnoreCase("yes")) {
                            System.out.println("Not Safe");

                            ResultSet result = connect.createStatement().executeQuery("select * from BlackBox where fname='" + fname + "'");
                            String black = "";

                            if (result.next() == true) {
                                black = AES.decrypt(result.getString("skey"), keyWord);
                            }
                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("black");
                            dos2.writeUTF(black);
                        }
                        if (grey.equalsIgnoreCase("no")) {
                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("grey");
                            dos2.writeUTF(sk);
                        }
                        //DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                        //dos2.writeUTF("Key Generated");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 1717) {
                try {
                    ServerSocket server909 = new ServerSocket(1717);
                    Socket con777;

                    while (true) {
                        con777 = server909.accept();

                        DataInputStream din = new DataInputStream(con777.getInputStream());

                        String fname = din.readUTF();

                        DBconnection db = new DBconnection();
                        Connection connect = db.getConnection();
                        Statement stmt = connect.createStatement();
                        Statement stmt1 = connect.createStatement();

                        ResultSet result = connect.createStatement().executeQuery("select * from BlackBox where fname='" + fname + "'");
                        String black = "";

                        if (result.next() == true) {
                            black = AES.decrypt(result.getString("skey"), keyWord);
                        }
                        String query1 = "update GreyBox set skey='" + black + "' where fname='" + fname + "'";
                        stmt.executeUpdate(query1);

                        String s = "No";

                        String query2 = "update GreyBox set attacked='" + s + "' where fname='" + fname + "'";
                        stmt1.executeUpdate(query2);

                        DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                        dos2.writeUTF("Recovered Successfully");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 4949) {
                try {
                    DBconnection db = new DBconnection();
                    Connection connect = db.getConnection();

                    ServerSocket server909 = new ServerSocket(4949);
                    Socket con777;
                    while (true) {
                        con777 = server909.accept();

                        SimpleDateFormat dateFormat = new SimpleDateFormat();
                        //get current date time with Date()
                        Date date = new Date();

                        String dt = dateFormat.format(date);

                        DataInputStream dis = new DataInputStream(con777.getInputStream());

                        String file = dis.readUTF();
                        String data = dis.readUTF();

                        ResultSet r1 = connect.createStatement().executeQuery("select * from GreyBox where fname='" + file + "'");

                        if (r1.next() == true) {
                            String sk = r1.getString("skey");

                            StringBuffer sb = new StringBuffer(sk);
                            String maldata = sb.append(data).toString();

                            System.out.println("Malicious Data : " + data);

                            String stat = "Yes";

                            connect.createStatement().executeUpdate("update GreyBox set skey='" + maldata + "' where fname='" + file + "'");
                            connect.createStatement().executeUpdate("update GreyBox set attacked='" + stat + "' where fname='" + file + "'");
                            String attack = "Attacker";

                            connect.createStatement().executeUpdate("insert into Attacker values('" + file + "','" + attack + "','" + data + "','" + dt + "')");

                            Socket sc = new Socket("localhost", 4949);
                            DataOutputStream dout = new DataOutputStream(sc.getOutputStream());

                            dout.writeUTF("attack");
                        } else {

                            DataOutputStream ds2 = new DataOutputStream(con777.getOutputStream());

                            ds2.writeUTF("notfound");
                        }
                    }
                } catch (Exception e) {
                }
            }
            if (this.port == 1515) {
                try {
                    ServerSocket server909 = new ServerSocket(1515);

                    Socket con777;

                    while (true) {
                        con777 = server909.accept();

                        DataInputStream din = new DataInputStream(con777.getInputStream());
                        String file = din.readUTF();

                        DBconnection db = new DBconnection();
                        Connection connect = db.getConnection();
                        String seckey = "";

                        ResultSet rr = connect.createStatement().executeQuery("select * from GreyBox where fname='" + file + "'");

                        String grey = "";

                        if (rr.next() == true) {
                            grey = rr.getString("attacked");
                        }
                        if (grey.equalsIgnoreCase("yes")) {
                            System.out.println("Not Safe");
                            Thread.sleep(2000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblA1.setIcon(arrow1);

                            lblOutPut0.setText("GETTING KEYS");
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblA3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);

                            lblOutPut1.setText("Key Deduplicated");
                            lblOutPut1.setForeground(Color.red);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblA4.setIcon(arrow4);

                            Thread.sleep(1000);
                            arrow5 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5g.png"));
                            lblA5.setIcon(arrow5);

                            Thread.sleep(1000);
                            lblimgMLE.setVisible(false);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(true);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(false);
                            Thread.sleep(1000);
                            lblimgMLE.setVisible(true);

                            Thread.sleep(1000);
                            arrow6 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6g.png"));
                            lblA6.setIcon(arrow6);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2g.png"));
                            lblA2.setIcon(arrow2);

                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            clear();
                            ResultSet rs1 = connect.createStatement().executeQuery("select * from BlackBox where fname='" + file + "'");
                            String black = "";

                            if (rs1.next() == true) {
                                black = AES.decrypt(rs1.getString("skey"), keyWord);
                            }
                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("black");
                            dos2.writeUTF(black);
                        }
                        if (grey.equalsIgnoreCase("no")) {
                            Thread.sleep(2000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblA1.setIcon(arrow1);

                            lblOutPut0.setText("GETTING KEYS");
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblA3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKM.setVisible(true);

                            lblOutPut1.setText("Key Is SAFE");
                            lblOutPut1.setForeground(Color.GREEN);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblA4.setIcon(arrow4);

                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(false);
                            Thread.sleep(1000);
                            lblimgKey.setVisible(true);

                            Thread.sleep(1000);
                            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2g.png"));
                            lblA2.setIcon(arrow2);

                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimgSource.setVisible(true);

                            clear();

                            System.out.println("Safe");

                            ResultSet rs1 = connect.createStatement().executeQuery("select * from GreyBox where fname='" + file + "'");
                            String greykey = "";

                            if (rs1.next() == true) {
                                greykey = rs1.getString("skey");
                            }
                            DataOutputStream d = new DataOutputStream(con777.getOutputStream());
                            d.writeUTF("grey");
                            d.writeUTF(greykey);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 2626) {
                try {
                    ServerSocket server909 = new ServerSocket(2626);
                    Socket con777;

                    while (true) {
                        con777 = server909.accept();

                        DataInputStream din = new DataInputStream(con777.getInputStream());

                        String file = din.readUTF();

                        DBconnection db = new DBconnection();
                        Connection connect = db.getConnection();
                        String seckey = "";

                        ResultSet rs = connect.createStatement().executeQuery("select * from GreyBox where fname='" + file + "'");

                        if (rs.next() == true) {
                            seckey = rs.getString("attacked");

                            if (seckey.equalsIgnoreCase("yes")) {
                                DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                                dos2.writeUTF("no");
                            }
                            if (seckey.equalsIgnoreCase("no")) {
                                DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                                dos2.writeUTF("success");
                            }
                        }
                        if (rs.next() == false) {
                            DataOutputStream dos2 = new DataOutputStream(con777.getOutputStream());
                            dos2.writeUTF("nofile");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        void clear() throws InterruptedException {
            Thread.sleep(2000);

            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1.png"));
            lblA1.setIcon(arrow1);

            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2.png"));
            lblA2.setIcon(arrow2);

            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3.png"));
            lblA3.setIcon(arrow3);

            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4.png"));
            lblA4.setIcon(arrow4);

            arrow5 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5.png"));
            lblA5.setIcon(arrow5);

            arrow6 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6.png"));
            lblA6.setIcon(arrow6);

            lblOutPut0.setVisible(false);
            lblOutPut1.setVisible(false);
        }

    }

}
