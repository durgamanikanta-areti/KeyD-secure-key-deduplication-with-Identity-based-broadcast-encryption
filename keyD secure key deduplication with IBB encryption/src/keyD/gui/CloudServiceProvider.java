/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package keyD.gui;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import keyD.dbutill.DBconnection;
import keyD.gui.ReceiverA.PortListener;

/**
 *
 * @author DELL
 */
public class CloudServiceProvider extends javax.swing.JFrame {

    String keyWord = "ef50a0ef2c3e3a5fdf803ae9752c8c66";
    ImageIcon one, two, three, four, five, six, arrow1, arrow2, arrow3, arrow4, arrow5, arrow6, arrow7, arrow8;

    public CloudServiceProvider() {
        initComponents();
        setTitle("Cloud Service Provider :: KeyD");

        int[] ports = new int[]{1234, 3090, 4090};

        for (int i = 0; i < 3; i++) {
            Thread t2 = new Thread(new PortListener(ports[i]));
            t2.start();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblSource = new javax.swing.JLabel();
        lblimagSource = new javax.swing.JLabel();
        lblup = new javax.swing.JLabel();
        lblCSP = new javax.swing.JLabel();
        lblimgCSP = new javax.swing.JLabel();
        lblarrow1 = new javax.swing.JLabel();
        lblarrow2 = new javax.swing.JLabel();
        lblimgkeyServer = new javax.swing.JLabel();
        lblArrow3 = new javax.swing.JLabel();
        lblArrow4 = new javax.swing.JLabel();
        lblKMCSP = new javax.swing.JLabel();
        lblGreyBox = new javax.swing.JLabel();
        lblArrow5 = new javax.swing.JLabel();
        lblArrow6 = new javax.swing.JLabel();
        lblBlackBox = new javax.swing.JLabel();
        lblMLE = new javax.swing.JLabel();
        lblkeyServer = new javax.swing.JLabel();
        lblDown = new javax.swing.JLabel();
        lblimgReceiver = new javax.swing.JLabel();
        lblOutPut1 = new javax.swing.JLabel();
        lblResponse = new javax.swing.JLabel();
        lblOutPut0 = new javax.swing.JLabel();
        lblReceiver = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuCSPFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenItemViewKeyAttackers = new javax.swing.JMenuItem();
        jMenuItemViewDataOwners = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSource.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblSource.setText("SOURCE");
        jPanel1.add(lblSource, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 465, 58, 26));

        lblimagSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/Source.jpg"))); // NOI18N
        jPanel1.add(lblimagSource, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 406, -1, -1));

        lblup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/up.png"))); // NOI18N
        jPanel1.add(lblup, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 40, 70));

        lblCSP.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblCSP.setText("CSP");
        jPanel1.add(lblCSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 40, 50));

        lblimgCSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/Router.jpg"))); // NOI18N
        jPanel1.add(lblimgCSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 110, 80));

        lblarrow1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1.png"))); // NOI18N
        jPanel1.add(lblarrow1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 90, 30));

        lblarrow2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2.png"))); // NOI18N
        jPanel1.add(lblarrow2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, -1, 20));

        lblimgkeyServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/KeyServer.png"))); // NOI18N
        jPanel1.add(lblimgkeyServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 70, 80));

        lblArrow3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3.png"))); // NOI18N
        jPanel1.add(lblArrow3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, 70, -1));

        lblArrow4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4.png"))); // NOI18N
        jPanel1.add(lblArrow4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 70, 60));

        lblKMCSP.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblKMCSP.setText("KM CSP");
        jPanel1.add(lblKMCSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, 60, 30));

        lblGreyBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/GreyBox.jpg"))); // NOI18N
        jPanel1.add(lblGreyBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 80, 80));

        lblArrow5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5.png"))); // NOI18N
        jPanel1.add(lblArrow5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 240, -1, 50));

        lblArrow6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6.png"))); // NOI18N
        jPanel1.add(lblArrow6, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, -1, 50));

        lblBlackBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/BlackBox.jpg"))); // NOI18N
        jPanel1.add(lblBlackBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, -1, 80));

        lblMLE.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblMLE.setText("MLE");
        jPanel1.add(lblMLE, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 374, 70, 20));

        lblkeyServer.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblkeyServer.setText("KEY SERVER");
        jPanel1.add(lblkeyServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, 100, 30));

        lblDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/down.png"))); // NOI18N
        lblDown.setText("         ");
        jPanel1.add(lblDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, 40, 70));

        lblimgReceiver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/Receiver.jpg"))); // NOI18N
        jPanel1.add(lblimgReceiver, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, -1, 80));

        lblOutPut1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jPanel1.add(lblOutPut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, 160, 30));

        lblResponse.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblResponse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblResponseMouseClicked(evt);
            }
        });
        jPanel1.add(lblResponse, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 120, 40));

        lblOutPut0.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jPanel1.add(lblOutPut0, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 30));

        lblReceiver.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jPanel1.add(lblReceiver, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 460, 160, 40));

        jMenuCSPFile.setText("CSP File");

        jMenuItem1.setText("View Router Files");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuCSPFile.add(jMenuItem1);

        jMenItemViewKeyAttackers.setText("View Key Attackers");
        jMenItemViewKeyAttackers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenItemViewKeyAttackersActionPerformed(evt);
            }
        });
        jMenuCSPFile.add(jMenItemViewKeyAttackers);

        jMenuItemViewDataOwners.setText("View Data Owners");
        jMenuItemViewDataOwners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewDataOwnersActionPerformed(evt);
            }
        });
        jMenuCSPFile.add(jMenuItemViewDataOwners);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuCSPFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuCSPFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblResponseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblResponseMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblResponseMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ViewRouterFiles v1 = new ViewRouterFiles();
        v1.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v1.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenItemViewKeyAttackersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenItemViewKeyAttackersActionPerformed
        ViewAttackers v11 = new ViewAttackers();
        v11.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v11.setVisible(true);
    }//GEN-LAST:event_jMenItemViewKeyAttackersActionPerformed

    private void jMenuItemViewDataOwnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewDataOwnersActionPerformed
        ViewDataOwners v2 = new ViewDataOwners();
        v2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        v2.setVisible(true);
    }//GEN-LAST:event_jMenuItemViewDataOwnersActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CloudServiceProvider.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CloudServiceProvider.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CloudServiceProvider.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CloudServiceProvider.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CloudServiceProvider().setVisible(true);
            }
        });
    }
    Timer timer = new Timer(0, null);

    class PortListener implements Runnable {

        int port;

        public PortListener(int port) {
            this.port = port;
        }

        public void run() {
            if (this.port == 1234) {
                try {
                    Socket s;

                    DBconnection db = new DBconnection();
                    Connection connect = db.getConnection();
                    ServerSocket sc = new ServerSocket(1234);
                    while (true) {
                        s = sc.accept();
                        DataInputStream din = new DataInputStream(s.getInputStream());

                        String owner = din.readUTF();
                        String fname = din.readUTF();
                        String content = din.readUTF();
                        String sk = din.readUTF();
                        String receiver = din.readUTF();
                        String dt = din.readUTF();

                        PrintStream out = new PrintStream(new FileOutputStream("Router\\" + fname));
                        out.print(content);
                        out.close();

                        Statement stmt = connect.createStatement();
                        String query1 = "insert into Router values('" + owner + "','" + fname + "','" + sk + "','" + receiver + "','" + dt + "')";
                        stmt.executeUpdate(query1);

                        Socket soc = new Socket("localhost", 8282);
                        DataOutputStream dout = new DataOutputStream(soc.getOutputStream());
                        dout.writeUTF(owner);
                        dout.writeUTF(fname);
                        dout.writeUTF(sk);
                        dout.writeUTF(receiver);
                        dout.writeUTF(dt);

                        DataInputStream datin = new DataInputStream(soc.getInputStream());

                        String msg = datin.readUTF();
                        String key = datin.readUTF();

                        if (msg.equalsIgnoreCase("grey")) {
                            ///safe				
                            Thread.sleep(2000);
                            lblimagSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow7 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/upg.png"));
                            lblup.setIcon(arrow7);

                            Thread.sleep(2000);
                            lblimgCSP.setVisible(false);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(true);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(false);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblarrow1.setIcon(arrow1);

                            lblOutPut0.setText("DECRYPTION");
                            lblOutPut0.setForeground(Color.BLACK);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblArrow3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblGreyBox.setVisible(false);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(true);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(false);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(true);

                            lblOutPut1.setText("Key is SAFE");
                            lblOutPut1.setForeground(Color.GREEN);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblArrow4.setIcon(arrow4);

                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);

                            Thread.sleep(1000);
                            arrow8 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/downg.png"));
                            lblDown.setIcon(arrow8);

                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(false);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(true);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(false);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(true);

                            if (receiver.equalsIgnoreCase("Receiver A")) {
                                lblReceiver.setText("Receiver A");
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }
                            if (receiver.equalsIgnoreCase("Receiver B")) {
                                lblReceiver.setText("Receiver B");
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            if (receiver.equalsIgnoreCase("Receiver C")) {
                                lblReceiver.setText("Receiver C");
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            if (receiver.equalsIgnoreCase("Receiver D")) {
                                lblReceiver.setText("Receiver D");
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }
//						clear();
                            JOptionPane.showMessageDialog(null, "Key is Safe (Grey Box)");
                            //	clear();
                        }
                        if (msg.equalsIgnoreCase("black")) {
                            //notsafe					
                            Thread.sleep(2000);
                            lblimagSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(true);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(false);
                            Thread.sleep(1000);
                            lblimagSource.setVisible(true);

                            Thread.sleep(1000);
                            arrow7 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/upg.png"));
                            lblup.setIcon(arrow7);

                            Thread.sleep(2000);
                            lblimgCSP.setVisible(false);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(true);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(false);
                            Thread.sleep(1000);
                            lblimgCSP.setVisible(true);

                            Thread.sleep(1000);
                            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1g.png"));
                            lblarrow1.setIcon(arrow1);

                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut0.setVisible(true);

                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);

                            Thread.sleep(1000);
                            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3g.png"));
                            lblArrow3.setIcon(arrow3);

                            Thread.sleep(1000);
                            lblGreyBox.setVisible(false);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(true);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(false);
                            Thread.sleep(1000);
                            lblGreyBox.setVisible(true);

                            lblOutPut1.setText("Key DEDUPLICATED");
                            lblOutPut1.setForeground(Color.RED);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(false);
                            Thread.sleep(200);
                            lblOutPut1.setVisible(true);

                            Thread.sleep(1000);
                            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4g.png"));
                            lblArrow4.setIcon(arrow4);

                            Thread.sleep(1000);
                            arrow5 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5g.png"));
                            lblArrow5.setIcon(arrow5);

                            Thread.sleep(1000);
                            lblBlackBox.setVisible(false);
                            Thread.sleep(1000);
                            lblBlackBox.setVisible(true);
                            Thread.sleep(1000);
                            lblBlackBox.setVisible(false);
                            Thread.sleep(1000);
                            lblBlackBox.setVisible(true);

                            Thread.sleep(1000);
                            arrow6 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6g.png"));
                            lblArrow6.setIcon(arrow6);

                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(false);
                            Thread.sleep(1000);
                            lblimgkeyServer.setVisible(true);

                            Thread.sleep(1000);
                            arrow8 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/downg.png"));
                            lblDown.setIcon(arrow8);

                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(false);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(true);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(false);
                            Thread.sleep(1000);
                            lblimgReceiver.setVisible(true);

                            if (receiver.equalsIgnoreCase("Receiver A")) {
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            if (receiver.equalsIgnoreCase("Receiver B")) {
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            if (receiver.equalsIgnoreCase("Receiver C")) {
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            if (receiver.equalsIgnoreCase("Receiver D")) {
                                lblReceiver.setVisible(true);
                                Thread.sleep(2000);
                            }

                            JOptionPane.showMessageDialog(null, "Key Deduplicated \n Taken from MLE");
                            //	clear();
                        }
                        if (receiver.equalsIgnoreCase("Receiver A")) {
                            Socket dest1 = new Socket("localhost", 9991);
                            DataOutputStream dos91 = new DataOutputStream(dest1.getOutputStream());
                            dos91.writeUTF(fname);
                            dos91.writeUTF(AES.decrypt(content, key));
                            ///
                            DataInputStream ins = new DataInputStream(dest1.getInputStream());
                            String m = ins.readUTF();
                            System.out.println(m);
                        }
                        if (receiver.equalsIgnoreCase("Receiver B")) {
                            Socket dest1 = new Socket("localhost", 9992);
                            DataOutputStream dos91 = new DataOutputStream(dest1.getOutputStream());
                            dos91.writeUTF(fname);
                            dos91.writeUTF(AES.decrypt(content, key));
                            ///
                            DataInputStream ins = new DataInputStream(dest1.getInputStream());
                            String m = ins.readUTF();
                            System.out.println(m);
                        }

                        if (receiver.equalsIgnoreCase("Receiver C")) {
                            Socket dest1 = new Socket("localhost", 9993);
                            DataOutputStream dos91 = new DataOutputStream(dest1.getOutputStream());
                            dos91.writeUTF(fname);
                            dos91.writeUTF(AES.decrypt(content, key));
                            ///
                            DataInputStream ins = new DataInputStream(dest1.getInputStream());
                            String m = ins.readUTF();
                            System.out.println(m);
                        }
                        if (receiver.equalsIgnoreCase("Receiver D")) {
                            Socket dest1 = new Socket("localhost", 9994);
                            DataOutputStream dos91 = new DataOutputStream(dest1.getOutputStream());
                            dos91.writeUTF(fname);
                            dos91.writeUTF(AES.decrypt(content, key));
                            ///
                            DataInputStream ins = new DataInputStream(dest1.getInputStream());
                            String m = ins.readUTF();
                            System.out.println(m);
                        }
                        DataOutputStream dos2 = new DataOutputStream(s.getOutputStream());
                        dos2.writeUTF("Uploaded");

                        clear();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 3090) {
                Socket s;
                try {
                    DBconnection db = new DBconnection();
                    Connection connect = db.getConnection();

                    ServerSocket sc = new ServerSocket(3090);
                    while (true) {
                        s = sc.accept();

                        DataInputStream din = new DataInputStream(s.getInputStream());

                        String name = din.readUTF();
                        String pass = din.readUTF();
                        String email = din.readUTF();
                        String Org = din.readUTF();
                        String Address = din.readUTF();
                        String PhoNo = din.readUTF();

                        connect.createStatement().executeUpdate("insert into OwnerRegister values('" + name + "','" + pass + "','" + email + "','" + Org + "','" + Address + "','" + PhoNo + "')");

                        DataOutputStream dout = new DataOutputStream(s.getOutputStream());
                        dout.writeUTF("success");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (this.port == 4090) {
                Socket s;
                try {
                    DBconnection db = new DBconnection();
                    Connection connect = db.getConnection();

                    ServerSocket sc = new ServerSocket(4090);
                    while (true) {
                        s = sc.accept();

                        DataInputStream din = new DataInputStream(s.getInputStream());

                        String name = din.readUTF();
                        String pass = din.readUTF();

                        ResultSet rs = connect.createStatement().executeQuery("select * from OwnerRegister where Ownername='" + name + "' and password_hash='" + pass + "'");
                        if (rs.next() == true) {
                            DataOutputStream dout = new DataOutputStream(s.getOutputStream());
                            dout.writeUTF("yes");
                        } else {
                            DataOutputStream dout = new DataOutputStream(s.getOutputStream());
                            dout.writeUTF("no");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

        void clear() throws InterruptedException {

            Thread.sleep(2000);

            arrow1 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow1.png"));
            lblarrow1.setIcon(arrow1);

            arrow2 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow2.png"));
            lblarrow2.setIcon(arrow2);

            arrow3 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow3.png"));
            lblArrow3.setIcon(arrow3);

            arrow4 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow4.png"));
            lblArrow4.setIcon(arrow4);

            arrow5 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow5.png"));
            lblArrow5.setIcon(arrow5);

            arrow6 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/arrow6.png"));
            lblArrow6.setIcon(arrow6);

            arrow7 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/up.png"));
            lblup.setIcon(arrow7);

            arrow8 =  new javax.swing.ImageIcon(getClass().getResource("/keyD/images/down.png"));
            lblDown.setIcon(arrow8);

            lblOutPut0.setVisible(false);
            lblOutPut1.setVisible(false);
            lblReceiver.setVisible(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenItemViewKeyAttackers;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuCSPFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemViewDataOwners;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblArrow3;
    private javax.swing.JLabel lblArrow4;
    private javax.swing.JLabel lblArrow5;
    private javax.swing.JLabel lblArrow6;
    private javax.swing.JLabel lblBlackBox;
    private javax.swing.JLabel lblCSP;
    private javax.swing.JLabel lblDown;
    private javax.swing.JLabel lblGreyBox;
    private javax.swing.JLabel lblKMCSP;
    private javax.swing.JLabel lblMLE;
    private javax.swing.JLabel lblOutPut0;
    private javax.swing.JLabel lblOutPut1;
    private javax.swing.JLabel lblReceiver;
    private javax.swing.JLabel lblResponse;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblarrow1;
    private javax.swing.JLabel lblarrow2;
    private javax.swing.JLabel lblimagSource;
    private javax.swing.JLabel lblimgCSP;
    private javax.swing.JLabel lblimgReceiver;
    private javax.swing.JLabel lblimgkeyServer;
    private javax.swing.JLabel lblkeyServer;
    private javax.swing.JLabel lblup;
    // End of variables declaration//GEN-END:variables
}
