/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package keyD.gui;

import java.awt.RenderingHints.Key;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.sql.Connection;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import keyD.dbutill.DBconnection;

/**
 *
 * @author DELL
 */
public class DataOwner extends javax.swing.JFrame {

    Cipher encoder;
    Key prKey;
    int rank;
    String selItem;
    File path;
    public static Key pubKey;
    
    public DataOwner(String name) {
        initComponents();
        txtOwnerNameDisplay.setText(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        btnVerifyKey = new javax.swing.JButton();
        btnUploadFile = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        btnGenerateKey = new javax.swing.JButton();
        btnRecoverKey = new javax.swing.JButton();
        txtFilName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtOwnerNameDisplay = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaFileDisplay = new javax.swing.JTextArea();
        lblBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHeading.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(153, 204, 255));
        lblHeading.setText("Owner Name");
        jPanel1.add(lblHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 130, 30));

        btnVerifyKey.setBackground(new java.awt.Color(0, 0, 0));
        btnVerifyKey.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnVerifyKey.setForeground(new java.awt.Color(51, 204, 255));
        btnVerifyKey.setText("Verify Key");
        btnVerifyKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyKeyActionPerformed(evt);
            }
        });
        jPanel1.add(btnVerifyKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 140, 30));

        btnUploadFile.setBackground(new java.awt.Color(0, 0, 0));
        btnUploadFile.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnUploadFile.setForeground(new java.awt.Color(51, 204, 255));
        btnUploadFile.setText("Upload File");
        btnUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadFileActionPerformed(evt);
            }
        });
        jPanel1.add(btnUploadFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 140, 30));

        btnBrowse.setBackground(new java.awt.Color(0, 0, 0));
        btnBrowse.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnBrowse.setForeground(new java.awt.Color(51, 204, 255));
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });
        jPanel1.add(btnBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 140, 30));

        btnGenerateKey.setBackground(new java.awt.Color(0, 0, 0));
        btnGenerateKey.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnGenerateKey.setForeground(new java.awt.Color(51, 204, 255));
        btnGenerateKey.setText("Generate Key");
        btnGenerateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateKeyActionPerformed(evt);
            }
        });
        jPanel1.add(btnGenerateKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 140, 30));

        btnRecoverKey.setBackground(new java.awt.Color(0, 0, 0));
        btnRecoverKey.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnRecoverKey.setForeground(new java.awt.Color(51, 204, 255));
        btnRecoverKey.setText("Recover Key");
        btnRecoverKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecoverKeyActionPerformed(evt);
            }
        });
        jPanel1.add(btnRecoverKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, 140, 30));

        txtFilName.setEditable(false);
        txtFilName.setBackground(new java.awt.Color(0, 0, 0));
        txtFilName.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtFilName.setForeground(new java.awt.Color(102, 204, 255));
        jPanel1.add(txtFilName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 180, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 204, 255));
        jLabel1.setText("File Name");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 120, 30));

        txtOwnerNameDisplay.setEditable(false);
        txtOwnerNameDisplay.setBackground(new java.awt.Color(0, 0, 0));
        txtOwnerNameDisplay.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtOwnerNameDisplay.setForeground(new java.awt.Color(102, 204, 255));
        jPanel1.add(txtOwnerNameDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 140, 30));

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setForeground(new java.awt.Color(51, 204, 255));

        txtaFileDisplay.setColumns(20);
        txtaFileDisplay.setRows(5);
        jScrollPane1.setViewportView(txtaFileDisplay);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 350, 410));

        lblBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/keyD/images/social_media.jpg"))); // NOI18N
        jPanel1.add(lblBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 650));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        String strline = "";
        JFileChooser chooser = new JFileChooser("Database");
	try 
        {
            File f = new File(new File("filename.txt").getCanonicalPath());
            chooser.setSelectedFile(f);
	}
        catch (IOException e1)
        {
	}

    int retval = chooser.showOpenDialog(btnBrowse);
    if (retval == JFileChooser.APPROVE_OPTION) 
    {
	path = chooser.getSelectedFile();
    }

    File curFile = chooser.getSelectedFile();
    String fileName = curFile.getName();
    txtFilName.setText(fileName);
			
    try 
    {
        FileInputStream fstream = new FileInputStream(curFile);
        DataInputStream ins = new DataInputStream(fstream);
	BufferedReader br = new BufferedReader(new InputStreamReader(ins));
	StringBuffer buffer = new StringBuffer();

	while ((strline = br.readLine()) != null)
        {
//          System.out.println(strline);
            buffer.append(strline + "\n");
        }
	txtaFileDisplay.setText(buffer.toString());	
    }
    catch (Exception e1)
    {
        e1.printStackTrace();
    }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnGenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateKeyActionPerformed
        KeyGenerator2 key = new KeyGenerator2();
        String sk = key.getKeys();
	SimpleDateFormat sd = new SimpleDateFormat();
               		
	Date d = new Date();
	String dt = sd.format(d);
        try
        {
            DBconnection db = new DBconnection();
            Connection connect = db.getConnection();
				
            String ip = JOptionPane.showInputDialog(null,"Enter Key Server Ip Address");
            Socket sc1 = new Socket(ip,509);
				
            String ownername = txtOwnerNameDisplay.getText();
            String file = txtFilName.getText();
				
            DataOutputStream d1 = new DataOutputStream(sc1.getOutputStream());
            d1.writeUTF(ownername);
            d1.writeUTF(file);
            d1.writeUTF(sk);
            d1.writeUTF(dt);
				
            DataInputStream din1 = new DataInputStream(sc1.getInputStream());
            String msg = din1.readUTF();
				
            if(msg.equalsIgnoreCase("no"))
            {
                JOptionPane.showMessageDialog(null, "File Already Exixt \n You Can Use The Same File");				
            }
            if(msg.equalsIgnoreCase("yes"))
            {
                JOptionPane.showMessageDialog(null, "Key Generated");
            }		
	}
        catch (Exception e1)
        {
				// TODO: handle exception
	}
		
    }//GEN-LAST:event_btnGenerateKeyActionPerformed

    private void btnUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadFileActionPerformed
        SimpleDateFormat sd = new SimpleDateFormat();
		
	Date d = new Date();
		
	String dt = sd.format(d);
        try 
        {
            PrintStream out = null;
				
            String owner = txtOwnerNameDisplay.getText();
            String file = txtFilName.getText();
				
            DBconnection db = new DBconnection();
            Connection connect = db.getConnection();
            Statement stmt = connect.createStatement();
				
            String clist[]={"RECEIVER A","RECEIVER B","RECEIVER C","RECEIVER D"};
            JComboBox cb=new JComboBox(clist);
            JOptionPane.showMessageDialog(null,cb,"Select Destination",JOptionPane.QUESTION_MESSAGE);
			
            String receiver = cb.getSelectedItem().toString();
				
            String ip = JOptionPane.showInputDialog(null,"Enter CSP Ip Address");
				
            Socket sc1 = new Socket(ip,1515);
            DataOutputStream dat = new DataOutputStream(sc1.getOutputStream());
				
            dat.writeUTF(file);
				
            DataInputStream dat1 = new DataInputStream(sc1.getInputStream());
            String msg1 = dat1.readUTF();
            String keyserver = dat1.readUTF();
            System.out.println(msg1);
				
            String content=txtaFileDisplay.getText();
				
            out = new PrintStream(new FileOutputStream("Owner\\"+file));
            out.print(content);
            out.close();
				
            String query1 = "insert into OwnerFiles values('"+owner+"','"+file+"','"+keyserver+"','"+receiver+"','"+dt+"')";
            stmt.executeUpdate(query1);
			
            Socket sc = new Socket(ip,1234);
            DataOutputStream dout = new DataOutputStream(sc.getOutputStream());
					
            dout.writeUTF(owner);
            dout.writeUTF(file);
            dout.writeUTF(AES.encrypt(content, keyserver));
            dout.writeUTF(keyserver);
            dout.writeUTF(receiver);
            dout.writeUTF(dt);
					
            DataInputStream din = new DataInputStream(sc.getInputStream());
					
            String msg = din.readUTF();
					
            System.out.println(msg);
					
            JOptionPane.showMessageDialog(null, "Data Uploaded Successfully");						
	}
        catch (Exception e1) 
        {
            e1.printStackTrace();
	}	
    }//GEN-LAST:event_btnUploadFileActionPerformed

    private void btnVerifyKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyKeyActionPerformed
        try
	{
            String fname = JOptionPane.showInputDialog(null,"Enter The File Name");
            String ip = JOptionPane.showInputDialog(null,"Enter Key Server Ip Address");
			
            Socket sock = new Socket(ip,2626);
				
            DataOutputStream d1 = new DataOutputStream(sock.getOutputStream());
            d1.writeUTF(fname);
			
            DataInputStream din1 = new DataInputStream(sock.getInputStream());
            String msg =  din1.readUTF();
				
            if(msg.equalsIgnoreCase("success"))
            {
		JOptionPane.showMessageDialog(null, "Key is Safe");
            }
            if(msg.equalsIgnoreCase("no"))
            {
                JOptionPane.showMessageDialog(null, "Key is Not Safe");
            }
            if(msg.equalsIgnoreCase("nofile"))
            {
                JOptionPane.showMessageDialog(null, "File Not Found");
            }
            }
            catch (Exception e5)
            {	
                System.out.println(e5);
            }
    }//GEN-LAST:event_btnVerifyKeyActionPerformed

    private void btnRecoverKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecoverKeyActionPerformed
        try
	{
            String fname = JOptionPane.showInputDialog(null,"Enter The File Name To Recover");
            String ip = JOptionPane.showInputDialog(null,"Enter Key Server Ip Address");
            
            Socket sock = new Socket(ip,1717);
				
            DataOutputStream d1 = new DataOutputStream(sock.getOutputStream());
            d1.writeUTF(fname);
			
            DataInputStream din1 = new DataInputStream(sock.getInputStream());
            String msg =  din1.readUTF();  
            System.out.println(msg);
            JOptionPane.showMessageDialog(null," File Recovered Successfully");
							
        }
        catch (Exception e5) 
        {			
            System.out.println(e5);
        }
    }//GEN-LAST:event_btnRecoverKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataOwner("a").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnGenerateKey;
    private javax.swing.JButton btnRecoverKey;
    private javax.swing.JButton btnUploadFile;
    private javax.swing.JButton btnVerifyKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackGround;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JTextField txtFilName;
    private javax.swing.JTextField txtOwnerNameDisplay;
    private javax.swing.JTextArea txtaFileDisplay;
    // End of variables declaration//GEN-END:variables
}
